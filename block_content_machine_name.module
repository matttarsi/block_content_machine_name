<?php

/**
 * @file
 * Module file for block_content_machine_name.
 */

use Drupal\block\Entity\Block;
use Drupal\Component\Utility\Html;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use \Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function block_content_machine_name_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'block_content') {
    $fields['machine_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Machine name'))
      ->setDescription(t('Machine name of the block'))
      ->setRequired(TRUE)
      ->setSetting('max_length', 255)
      ->addConstraint('UniqueField', [])
      ->setDisplayOptions('form', [
        'type' => 'machine_name',
        'weight' => -4,
        'settings' => [
          'source' => [
            'info',
            'widget',
            0,
            'value',
          ],
          'exists' => 'block_content_machine_name_existing_block_content_name',
        ],
      ])
      ->setDisplayConfigurable('form', TRUE);

    return $fields;
  }
}

/**
 * Check the given machine name already exists or not.
 *
 * @param string $id
 *   The machine name.
 *
 * @return bool
 *   Return true if machine_name exists else false.
 */
function block_content_machine_name_existing_block_content_name($id) {
  if (\Drupal::entityTypeManager()->getStorage('block_content')->getQuery()->condition('machine_name', $id)->range(0, 1)->count()->execute()) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function block_content_machine_name_preprocess_block(&$variables) {
  switch ($variables['base_plugin_id']) {
    case 'block_content':
      $block_content = $variables['content']['#block_content'];
      $machine_name = $block_content->get('machine_name')->value;
      $cssclass = 'block-content--' . strtolower($machine_name);
      $variables['attributes']['class'][] = Html::cleanCssIdentifier($cssclass);
      $variables['attributes']['class'][] = 'block-type-block-content';
      break;
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function block_content_machine_name_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Get the template suggestion if defined.
  $block = Block::load($variables['elements']['#id']);
  $suggestion = $block->getThirdPartySetting('block_content_machine_name', 'template_suggestion', '');
  if (!empty($suggestion)) {
    $suggestions[] = $suggestion;
  }

  // Add template suggestion based on machine name.
  switch ($variables['elements']['#base_plugin_id']) {
    case 'block_content':
      $block_content = $variables['elements']['content']['#block_content'];
      $machine_name = $block_content->get('machine_name')->value;
      $suggestions[] = 'block__block_content__' . $machine_name;
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function block_content_machine_name_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Get the thir party setting for template suggestion.
  $block = $form_state->getFormObject()->getEntity();
  $suggestion = $block->getThirdPartySetting('block_content_machine_name', 'template_suggestion', '');

  $form['settings']['template_suggestion'] = [
    '#type' => 'textfield',
    '#title' => t('Template suggestion'),
    '#default_value' => $suggestion,
  ];

  // Submit handler to store third party setting of template suggestion.
  array_unshift($form['actions']['submit']['#submit'], 'block_content_machine_name_block_form_submit');
}

/**
 * Submit handler to set third party settings for template suggestion.
 */
function block_content_machine_name_block_form_submit(&$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $block = $form_state->getFormObject()->getEntity();
  $template = !empty($values['settings']['template_suggestion']) ? $values['settings']['template_suggestion'] : NULL;
  $block->setThirdPartySetting('block_content_machine_name', 'template_suggestion', $template)->save();
}
